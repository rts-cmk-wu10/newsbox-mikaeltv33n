{"version":3,"file":"main.js","mappings":";;;;;AAAA,6CAAe;AACf;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,CAAC,GAAG,EAAC;;;;;ACbL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAAe,uBAAuB;;;ACPtC;AAC4B;AACoC;AAChE;AACA;AACA,6BAAe,SAAS,gBAAC;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,6BAA6B,uBAAuB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,SAAS;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,+DAA+D,MAAM;AACrE;AACA,4DAA4D,cAAc;AAC1E,8DAA8D,gCAAgC;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,8BAA8B;AAC9B;AACA;AACA;AACA,iCAAiC;AACjC,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA,oDAAoD,UAAU;AAC9D,iBAAiB;AACjB,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;;;;;ACrKgD;AAChD;AACA,0DAAe;AACf;AACA;AACA,IAAI,eAAe;AACnB,CAAC;;ACN+C;AAChD;AACA,2DAAe;AACf;AACA;AACA,IAAI,eAAe;AACnB,CAAC;;;;ACNoB;AACM;AACE;AACK;AACE;AACI;AACC;AACf","sources":["webpack://webpack-example/./src/scripts/headline.js","webpack://webpack-example/./src/scripts/getJSONfromLocalstorage.js","webpack://webpack-example/./src/scripts/fetchArticleApi.js","webpack://webpack-example/./src/scripts/fetchArchivedArticles.js","webpack://webpack-example/./src/scripts/fetchFrontpageArticles.js","webpack://webpack-example/./src/index.js"],"sourcesContent":["export default (function headline() {\r\n    const CURRENTPATH = window.location.pathname;\r\n\r\n    if (CURRENTPATH.includes(\"index.html\")) {\r\n        const INBOX_HEADLINE = \"Newsbox\";\r\n        document.querySelector(\"h1\").innerText = INBOX_HEADLINE;\r\n    } else if (CURRENTPATH.includes(\"archive.html\")) {\r\n        const ARCHIVE_HEADLINE = \"Archive\";\r\n        document.querySelector(\"h1\").innerText = ARCHIVE_HEADLINE;\r\n     } else if (CURRENTPATH.includes(\"settings.html\")) {\r\n        const SETTINGS_HEADLINE = \"News settings\";\r\n        document.querySelector(\"h1\").innerText = SETTINGS_HEADLINE;\r\n    }\r\n})();\r\n","function getJSONfromLocalStorage(key) {\r\n\tconst OBJECT = localStorage.getItem(key)\r\n\t\t? JSON.parse(localStorage.getItem(key))\r\n\t\t: null\r\n\treturn OBJECT\r\n}\r\n\r\nexport default getJSONfromLocalStorage\r\n","// Import the LOGO image and the getJSONfromLocalStorage function\r\nimport \"../images/LOGO.png\";\r\nimport getJSONfromLocalStorage from \"./getJSONfromLocalstorage\";\r\n\r\n// Define the main function with optional parameters\r\nexport default function (onlyarchived = false, action = \"archive\") {\r\n\r\n    // List of categories\r\n    const categories = [\r\n        \"arts\", \"automobiles\", \"books\",\r\n        \"business\", \"fashion\", \"food\", \"health\", \"home\", \"insider\", \"magazine\", \"sports\",\r\n        \"movies\", \"nyregion\", \"obituaries\", \"opinion\", \"politics\", \"realestate\", \"science\", \"sundayreview\", \"technology\",\r\n        \"theater\", \"t-magazine\", \"travel\", \"upshot\", \"us\", \"world\"\r\n    ];\r\n\r\n    // Event listener for clicks on the document\r\n    document.addEventListener(\"click\", function (event) {\r\n        const clickedElement = event.target;\r\n        // Check if the clicked element is a category icon\r\n        if (clickedElement.classList.contains(\"material-symbols-outlined\")) {\r\n            const dropdown = clickedElement.closest(\".category\");\r\n            // Toggle the rotation of the dropdown icon if it's part of a category\r\n            if (dropdown) {\r\n                const dropdownIcon = dropdown.querySelector(\".category__dropdown\");\r\n                dropdownIcon.classList.toggle(\"rotate\");\r\n            }\r\n        }\r\n    });\r\n\r\n    // Get archived articles from local storage or initialize as an empty array\r\n    const archivedArticles = getJSONfromLocalStorage(\"archived_articles\") || [];\r\n\r\n    // Get the categories container from the document\r\n    const categoriesContainer = document.querySelector('.categories');\r\n\r\n    // Hidden categories (not implemented in the provided code)\r\n    const hiddenCategories = [];\r\n\r\n    // Iterate through categories and create corresponding elements\r\n    categories.filter(category => onlyarchived || !hiddenCategories.includes(category)).forEach(category => {\r\n        // Create a details element for each category\r\n        const categoryElement = document.createElement('details');\r\n        categoryElement.className = 'category';\r\n\r\n        // Populate the summary section with category information\r\n        categoryElement.innerHTML = `\r\n            <summary class=\"category__summary\">\r\n                <div class=\"category__summaryContainer\">\r\n                    <img class=\"category__logo\" src=\"./images/LOGO.png\">\r\n                    <h2>${category}</h2>\r\n                </div>\r\n                <span class=\"material-symbols-outlined category__dropdown\">expand_more</span>\r\n            </summary>\r\n        `;\r\n\r\n        // Create a div element for the category content\r\n        const contentElement = document.createElement('div');\r\n        contentElement.className = 'category__content';\r\n        const ulElement = document.createElement(\"ul\");\r\n        contentElement.appendChild(ulElement);\r\n        // Add an event listener to the dropdown icon for fetching articles\r\n        categoryElement.querySelector(\".category__dropdown\").addEventListener(\"click\", function () {\r\n            // Check if content already exists\r\n            if (categoryElement.querySelector('.category__content')) return;\r\n\r\n            // Fetch articles from the New York Times API\r\n            fetch(`https://api.nytimes.com/svc/topstories/v2/${category}.json?api-key=uZhoGPSEKtSyAp1AGwJYzO8qDAJsjMvc`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    // Filter and process each article\r\n                    data.results.filter(element => {\r\n                        if (onlyarchived) return archivedArticles.includes(element.uri)\r\n                        return !archivedArticles.includes(element.uri)\r\n                    }).forEach(element => {\r\n                        // Truncate function to limit the length of the article abstract\r\n                        function truncate(string, maxlength) {\r\n                            const length = string.length\r\n                            let truncated = string.substr(0, maxlength)\r\n                            if (truncated.charAt(truncated.length - 1) === \".\") return truncated\r\n                            else if (length > maxlength) return truncated + \"...\"\r\n                            return truncated\r\n                        }\r\n\r\n                        // Create a list item for each article\r\n                        const listItemElement = document.createElement(\"li\");\r\n\r\n                        // Create an article container\r\n                        const articleContainer = document.createElement('section');\r\n                        listItemElement.appendChild(articleContainer);\r\n\r\n                        // Create a button and add it to the list item\r\n                        const buttonElement = document.createElement(\"button\");\r\n                        const inboxIcon = document.createElement(\"span\");\r\n                        inboxIcon.classList.add(\"material-symbols-outlined\");\r\n                        if (action === \"archive\") buttonElement.classList.add(\"archive-button\")\r\n                        if (action === \"delete\") buttonElement.classList.add(\"delete-button\")\r\n                        if (action === \"delete\") inboxIcon.innerText = \"delete\"\r\n                        if (action === \"archive\") inboxIcon.innerText = \"inbox\";\r\n                        buttonElement.appendChild(inboxIcon);\r\n                        listItemElement.appendChild(buttonElement);\r\n\r\n                        // Populate the article container with information\r\n                        articleContainer.className = 'article__container';\r\n                        let image = \"https://picsum.photos/200\"\r\n                        if (element.multimedia?.length) {\r\n                            const multimedia = element.multimedia.find(mm => {\r\n                                if (mm.format === \"Large Thumbnail\") return mm\r\n                            })\r\n                            if (multimedia) image = multimedia.url\r\n                        }\r\n                        articleContainer.innerHTML = `\r\n                            <img class=\"article__image\" src='${image}'alt='headline picture'>\r\n                            <div class=\"article__text\">\r\n                            <h2 class='article__headline'>${element.title}</h2>\r\n                            <p class='article__description'>${truncate(element.abstract, 100)}</p>\r\n                            </div>\r\n                        `;\r\n\r\n                        // Add a click event listener to the list item for scrolling\r\n                        ulElement.addEventListener(\"click\", (e) => {\r\n                            const liElement = e.target.closest(\"li\");\r\n                            const btnElement = e.target.closest(\"button\");\r\n                            if (liElement && liElement.scrollLeft === 0) {\r\n                                liElement.scrollBy({\r\n                                    left: 1,\r\n                                    behavior: \"smooth\"\r\n                                });\r\n                            } else if (!btnElement && liElement) {\r\n                                liElement.scrollBy({\r\n                                    left: -1,\r\n                                    behavior: \"smooth\"\r\n                                });\r\n                            } else if (btnElement && liElement) {\r\n                                liElement.remove();\r\n                                // Update archived articles based\r\n\r\n                                // Update archived articles based on the specified action\r\n                                if (action === \"archive\") {\r\n                                    archivedArticles.push(element.uri);\r\n                                } else if (action === \"delete\") {\r\n                                    const indexToBeDeleted = archivedArticles.indexOf(element.uri);\r\n                                    if (indexToBeDeleted === -1) return;\r\n                                    archivedArticles.splice(indexToBeDeleted, 1);\r\n                                }\r\n\r\n                                // Save the updated archived articles to local storage\r\n                                localStorage.setItem(\"archived_articles\", JSON.stringify(archivedArticles));\r\n                            }\r\n                        });\r\n\r\n                        // Add the list item to the unordered list\r\n                        ulElement.appendChild(listItemElement);\r\n                    });\r\n\r\n                    // Append the content to the category element\r\n                    categoryElement.appendChild(contentElement);\r\n                })\r\n                .catch(error => {\r\n                    console.error(`Error fetching ${category} articles:`, error);\r\n                });\r\n        });\r\n\r\n        // Append the category element to the categories container\r\n        categoriesContainer.append(categoryElement);\r\n    });\r\n};\r\n","import fetchArticleApi from \"./fetchArticleApi\";\r\n\r\nexport default (function () {\r\n    if (!window.location.pathname.includes(\"archive.html\")) return;\r\n\r\n    fetchArticleApi(true, \"delete\")\r\n})()","import fetchArticleApi from \"./fetchArticleApi\";\r\n\r\nexport default (function () {\r\n    if (!window.location.pathname.includes(\"index.html\")) return;\r\n\r\n    fetchArticleApi()\r\n})()","import \"./style.scss\"\r\nimport \"./scripts/headline\"\r\nimport \"./scripts/burgermenu\"\r\nimport \"./scripts/fetchArticleApi\"\r\nimport \"./images/aubergine-feta.png\"\r\nimport \"./scripts/fetchArchivedArticles\"\r\nimport \"./scripts/fetchFrontpageArticles\"\r\nimport \"./images/OST3.jpg\"\r\nimport \"./images/LOGO.png\""],"names":[],"sourceRoot":""}